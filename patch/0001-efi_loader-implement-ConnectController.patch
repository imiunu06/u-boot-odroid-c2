From 4b79796f45e4982c549adcb992d0b4ca129a6df1 Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Tue, 1 Aug 2017 08:00:01 +0200
Subject: [PATCH 1/1] efi_loader: implement ConnectController

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 lib/efi_loader/efi_boottime.c | 62 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 62 insertions(+)

diff --git a/lib/efi_loader/efi_boottime.c b/lib/efi_loader/efi_boottime.c
index eee55f42ee..a9012ede48 100644
--- a/lib/efi_loader/efi_boottime.c
+++ b/lib/efi_loader/efi_boottime.c
@@ -21,6 +21,14 @@
 
 DECLARE_GLOBAL_DATA_PTR;
 
+static efi_status_t EFIAPI efi_locate_protocol(efi_guid_t *protocol,
+					       void *registration,
+					       void **protocol_interface);
+static efi_status_t EFIAPI efi_locate_handle_buffer(
+			enum efi_locate_search_type search_type,
+			efi_guid_t *protocol, void *search_key,
+			unsigned long *no_handles, efi_handle_t **buffer);
+
 /* This list contains all the EFI objects our payload has access to */
 LIST_HEAD(efi_obj_list);
 
@@ -913,8 +921,62 @@ static efi_status_t EFIAPI efi_connect_controller(
 			struct efi_device_path *remain_device_path,
 			bool recursive)
 {
+	efi_handle_t *driver_image_handle_override = NULL;
+	efi_status_t r;
+	UINTN buffer_size = 0;
+	u32 version;
+	struct efi_driver_family_override_protocol
+			*driver_family_override_protocol = NULL;
+	struct efi_platform_driver_override_protocol
+			*platform_driver_override_protocol = NULL;
+
 	EFI_ENTRY("%p, %p, %p, %d", controller_handle, driver_image_handle,
 		  remain_device_path, recursive);
+
+	if (!controller_handle)
+	return EFI_EXIT(EFI_INVALID_PARAMETER);
+
+	/*  Context Override */
+	if (driver_image_handle) {
+		for (;driver_image_handle; ++driver_image_handle) {
+			/* Call the registration stuff here. */
+		}
+	}
+	/*  Platform Driver Override */
+	r = EFI_CALL(efi_locate_protocol(
+			&efi_platform_driver_override_protocol_guid,
+			NULL,
+			(void **) &driver_family_override_protocol));
+	if (r == EFI_SUCCESS && platform_driver_override_protocol) {
+		do {
+		r = platform_driver_override_protocol->get_driver(
+			platform_driver_override_protocol,
+			controller_handle,
+			(void **) &driver_image_handle_override);
+			/* Call the registration stuff here. */
+		} while (r == EFI_SUCCESS);
+	}
+	/* Driver Family Override Search */
+	r = efi_locate_handle(
+			by_protocol,
+			&efi_driver_family_override_protocol_guid,
+			NULL,
+			&buffer_size,
+			(void *) driver_family_override_protocol);
+	if (r == EFI_SUCCESS && driver_family_override_protocol) {
+		do {
+		version = driver_family_override_protocol->get_version(
+				driver_family_override_protocol);
+			/* Call the registration stuff here. */
+		} while (r == EFI_SUCCESS);
+	}
+	/* Driver Family Override Search */
+
+	/* Bus Specific Driver Override */
+
+	/* Driver Binding Search */
+
+	debug("%s(%d):\n", __FILE__, __LINE__);
 	return EFI_EXIT(EFI_NOT_FOUND);
 }
 
-- 
2.14.1


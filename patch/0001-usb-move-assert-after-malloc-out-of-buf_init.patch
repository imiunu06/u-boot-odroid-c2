From 01932853a65c38985344837e0a9124e19d52a139 Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Fri, 23 Feb 2018 07:15:00 +0100
Subject: [PATCH 1/1] usb: move assert after malloc out of buf_init()

Using an assert() to check if we are out of memory is not a good idea.
Instead buf_init() should return an error code.

The assert is pusshed out to the usbtty driver which will need further
cleanup to handle errors without assert().

buf_free() should not assert that a previous call to buf_init was
successful.

Both buf_free() and buf_init() shall return 0 on success.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 drivers/serial/usbtty.c |  4 ++--
 include/circbuf.h       | 24 ++++++++++++++++++++----
 lib/circbuf.c           | 11 +++++------
 3 files changed, 27 insertions(+), 12 deletions(-)

diff --git a/drivers/serial/usbtty.c b/drivers/serial/usbtty.c
index 182385e499d..9bd78c8a61b 100644
--- a/drivers/serial/usbtty.c
+++ b/drivers/serial/usbtty.c
@@ -546,8 +546,8 @@ int drv_usbtty_init (void)
 	usbtty_init_terminal_type(strcmp(tt,"cdc_acm"));
 
 	/* prepare buffers... */
-	buf_init (&usbtty_input, USBTTY_BUFFER_SIZE);
-	buf_init (&usbtty_output, USBTTY_BUFFER_SIZE);
+	assert(!buf_init(&usbtty_input, USBTTY_BUFFER_SIZE));
+	assert(!buf_init(&usbtty_output, USBTTY_BUFFER_SIZE));
 
 	/* Now, set up USB controller and infrastructure */
 	udc_init ();		/* Basic USB initialization */
diff --git a/include/circbuf.h b/include/circbuf.h
index 34d0f85f269..72ce33b2d8b 100644
--- a/include/circbuf.h
+++ b/include/circbuf.h
@@ -19,9 +19,25 @@ typedef struct circbuf {
 	char *end;		/* end of data buffer */
 } circbuf_t;
 
-int buf_init (circbuf_t * buf, unsigned int size);
-int buf_free (circbuf_t * buf);
-int buf_pop (circbuf_t * buf, char *dest, unsigned int len);
-int buf_push (circbuf_t * buf, const char *src, unsigned int len);
+/*
+ * Initialize circular buffer.
+ *
+ * @buf:	circular buffer
+ * @size:	size of buffer to allocate
+ * @return:	0 if successful
+ */
+int buf_init(circbuf_t *buf, unsigned int size);
+
+/*
+ * Release circular buffer.
+ *
+ * @buf:	circular buffer
+ * @return:	0 if successful
+ */
+int buf_free(circbuf_t *buf);
+
+int buf_pop(circbuf_t *buf, char *dest, unsigned int len);
+
+int buf_push(circbuf_t *buf, const char *src, unsigned int len);
 
 #endif
diff --git a/lib/circbuf.c b/lib/circbuf.c
index 6ed05164304..4879b31c221 100644
--- a/lib/circbuf.c
+++ b/lib/circbuf.c
@@ -6,11 +6,11 @@
  */
 
 #include <common.h>
+#include <errno.h>
 #include <malloc.h>
 
 #include <circbuf.h>
 
-
 int buf_init (circbuf_t * buf, unsigned int size)
 {
 	assert (buf != NULL);
@@ -18,24 +18,23 @@ int buf_init (circbuf_t * buf, unsigned int size)
 	buf->size = 0;
 	buf->totalsize = size;
 	buf->data = (char *) malloc (sizeof (char) * size);
-	assert (buf->data != NULL);
-
+	if (!buf->data)
+		return -ENOMEM;
 	buf->top = buf->data;
 	buf->tail = buf->data;
 	buf->end = &(buf->data[size]);
 
-	return 1;
+	return 0;
 }
 
 int buf_free (circbuf_t * buf)
 {
 	assert (buf != NULL);
-	assert (buf->data != NULL);
 
 	free (buf->data);
 	memset (buf, 0, sizeof (circbuf_t));
 
-	return 1;
+	return 0;
 }
 
 int buf_pop (circbuf_t * buf, char *dest, unsigned int len)
-- 
2.15.1


From ca1aa1e9411c74dd520ba9c37de025c45f26562f Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Sun, 30 Jul 2017 15:52:37 +0200
Subject: [PATCH 1/1] efi_loader: write protocol GUID in OpenProtocol

To understand what is happening in protocol related boot services
it is necessary to know the protocol interface GUID.
Let's write a debug message.

Cc: Rob Clark <robdclark@gmail.com>
Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 include/efi_loader.h          |  8 ++++++++
 lib/efi_loader/efi_boottime.c | 13 ++++++++++++-
 2 files changed, 20 insertions(+), 1 deletion(-)

diff --git a/include/efi_loader.h b/include/efi_loader.h
index 18d4285c58..f3150e1430 100644
--- a/include/efi_loader.h
+++ b/include/efi_loader.h
@@ -17,6 +17,7 @@
 
 int __efi_entry_check(void);
 int __efi_exit_check(void);
+const char *__efi_nesting(void);
 const char *__efi_nesting_inc(void);
 const char *__efi_nesting_dec(void);
 
@@ -64,6 +65,13 @@ const char *__efi_nesting_dec(void);
 	debug("%sEFI: Return From: %s\n", __efi_nesting_dec(), #exp); \
 	} while(0)
 
+/*
+ * Write GUID
+ */
+#define EFI_PRINT_GUID(txt, guid) ({ \
+	debug("%sEFI: %s %pUl\n", __efi_nesting(), txt, guid); \
+	})
+
 extern struct efi_runtime_services efi_runtime_services;
 extern struct efi_system_table systab;
 
diff --git a/lib/efi_loader/efi_boottime.c b/lib/efi_loader/efi_boottime.c
index 566b22dfae..1196ec545b 100644
--- a/lib/efi_loader/efi_boottime.c
+++ b/lib/efi_loader/efi_boottime.c
@@ -120,6 +120,11 @@ static const char *indent_string(int level)
 	return &indent[max - level];
 }
 
+const char *__efi_nesting(void)
+{
+	return indent_string(nesting_level);
+}
+
 const char *__efi_nesting_inc(void)
 {
 	return indent_string(nesting_level++);
@@ -490,6 +495,7 @@ static efi_status_t efi_search_protocol(void *handle,
 
 	if (!handle || !protocol_guid)
 		return EFI_INVALID_PARAMETER;
+	EFI_PRINT_GUID("protocol", protocol_guid);
 	efiobj = efi_search_obj(handle);
 	if (!efiobj)
 		return EFI_INVALID_PARAMETER;
@@ -652,6 +658,7 @@ static efi_status_t efi_locate_handle(
 	case by_protocol:
 		if (!protocol)
 			return EFI_INVALID_PARAMETER;
+		EFI_PRINT_GUID("protocol", protocol);
 		break;
 	default:
 		return EFI_INVALID_PARAMETER;
@@ -1256,6 +1263,8 @@ static efi_status_t EFIAPI efi_locate_protocol(const efi_guid_t *protocol,
 	if (!protocol || !protocol_interface)
 		return EFI_EXIT(EFI_INVALID_PARAMETER);
 
+	EFI_PRINT_GUID("protocol", protocol);
+
 	list_for_each(lhandle, &efi_obj_list) {
 		struct efi_object *efiobj;
 
@@ -1460,6 +1469,8 @@ efi_status_t EFIAPI efi_open_protocol(
 		goto out;
 	}
 
+	EFI_PRINT_GUID("protocol", protocol);
+
 	switch (attributes) {
 	case EFI_OPEN_PROTOCOL_BY_HANDLE_PROTOCOL:
 	case EFI_OPEN_PROTOCOL_GET_PROTOCOL:
-- 
2.14.1


From 1b55a35336e956a8062fdb6fb74f9c6fabecd4e2 Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Mon, 17 Jul 2017 18:45:46 +0200
Subject: [PATCH 1/1] efi_console: set up events

Set up a timer event and the WaitForKey event.
In the notify function of the timer evernt check for console input
and signal the WaitForKey event accordingly.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 cmd/bootefi.c                |  1 +
 include/efi_loader.h         |  2 ++
 lib/efi_loader/efi_console.c | 25 +++++++++++++++++++++++++
 3 files changed, 28 insertions(+)

diff --git a/cmd/bootefi.c b/cmd/bootefi.c
index 966d001d41..cf717564c4 100644
--- a/cmd/bootefi.c
+++ b/cmd/bootefi.c
@@ -112,6 +112,7 @@ static void efi_init_obj_list(void)
 	efi_obj_list_initalized = 1;
 	list_add_tail(&loaded_image_info_obj.link, &efi_obj_list);
 	list_add_tail(&bootefi_device_obj.link, &efi_obj_list);
+	efi_console_register();
 #ifdef CONFIG_PARTITIONS
 	efi_disk_register();
 #endif
diff --git a/include/efi_loader.h b/include/efi_loader.h
index 342e960d14..834a593299 100644
--- a/include/efi_loader.h
+++ b/include/efi_loader.h
@@ -90,6 +90,8 @@ struct efi_event {
 /* This list contains all UEFI objects we know of */
 extern struct list_head efi_obj_list;
 
+/* Called by bootefi to make console interface available */
+int efi_console_register(void);
 /* Called by bootefi to make all disk storage accessible as EFI objects */
 int efi_disk_register(void);
 /* Called by bootefi to make GOP (graphical) interface available */
diff --git a/lib/efi_loader/efi_console.c b/lib/efi_loader/efi_console.c
index 8ef7326fef..0f327fa863 100644
--- a/lib/efi_loader/efi_console.c
+++ b/lib/efi_loader/efi_console.c
@@ -426,3 +426,28 @@ const struct efi_simple_input_interface efi_con_in = {
 	.read_key_stroke = efi_cin_read_key_stroke,
 	.wait_for_key = NULL,
 };
+
+static struct efi_event *console_timer_event;
+
+static void console_timer_notify(struct efi_event *event, void *context)
+{
+	EFI_ENTRY("%p, %p", event, context);
+	printf("'");
+	EFI_EXIT(EFI_SUCCESS);
+}
+
+/* This gets called from do_bootefi_exec(). */
+int efi_console_register(void)
+{
+	efi_status_t r;
+	r = efi_create_event(EVT_TIMER | EVT_NOTIFY_SIGNAL, TPL_CALLBACK,
+			     console_timer_notify, NULL, &console_timer_event);
+	if (r != EFI_SUCCESS) {
+		printf("ERROR: Failed to register console event\n");
+		return r;
+	}
+	r = efi_set_timer(console_timer_event, EFI_TIMER_PERIODIC, 10000000);
+	if (r != EFI_SUCCESS)
+		printf("ERROR: Failed to set console timer\n");
+	return r;
+}
-- 
2.13.2


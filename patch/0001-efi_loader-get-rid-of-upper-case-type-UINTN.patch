From f90a3a9eff117a77f92357535c354c8d44e01c8f Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Sun, 17 Sep 2017 18:09:21 +0200
Subject: [PATCH 1/1] efi_loader: get rid of upper case type UINTN

Types should be lower case to match the U-Boot coding style.

The UEFI specification uses UINTN as argument type in many services.
UINTN is meant to be an unsigned integer with a width equal to the
bitness of the system.
In most case the parameters refer to buffer sizes or the number of
elements. Here using size_t is most adequate.

Tpl levels exist only in the range 0 - 31. But the UEFI spec
authors made them UINTN anyway.

Let's simply use size_t when referring to the tpl level.

Further remove unused typedef INTN.

Reported by Simon in
Re: [PATCH 16/23] efi_loader: implement DisconnectController
https://lists.denx.de/pipermail/u-boot/2017-August/304378.html

Reported by: Simon Glass <sjg@chromium.org>
Fixes: 503f26955489 (efi_loader: correct size for tpl level)
Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 include/efi_api.h                   |  8 +++-----
 include/efi_loader.h                |  4 ++--
 lib/efi_loader/efi_boottime.c       | 12 ++++++------
 lib/efi_selftest/efi_selftest_tpl.c |  2 +-
 4 files changed, 12 insertions(+), 14 deletions(-)

diff --git a/include/efi_api.h b/include/efi_api.h
index a9a6494afe..a292cf7d76 100644
--- a/include/efi_api.h
+++ b/include/efi_api.h
@@ -28,8 +28,6 @@ enum efi_timer_delay {
 	EFI_TIMER_RELATIVE = 2
 };
 
-#define UINTN size_t
-typedef long INTN;
 typedef uint16_t *efi_string_t;
 
 #define EVT_TIMER				0x80000000
@@ -49,8 +47,8 @@ struct efi_event;
 /* EFI Boot Services table */
 struct efi_boot_services {
 	struct efi_table_hdr hdr;
-	efi_status_t (EFIAPI *raise_tpl)(UINTN new_tpl);
-	void (EFIAPI *restore_tpl)(UINTN old_tpl);
+	efi_status_t (EFIAPI *raise_tpl)(size_t new_tpl);
+	void (EFIAPI *restore_tpl)(size_t old_tpl);
 
 	efi_status_t (EFIAPI *allocate_pages)(int, int, unsigned long,
 					      efi_physical_addr_t *);
@@ -62,7 +60,7 @@ struct efi_boot_services {
 	efi_status_t (EFIAPI *free_pool)(void *);
 
 	efi_status_t (EFIAPI *create_event)(uint32_t type,
-			UINTN notify_tpl,
+			size_t notify_tpl,
 			void (EFIAPI *notify_function) (
 					struct efi_event *event,
 					void *context),
diff --git a/include/efi_loader.h b/include/efi_loader.h
index 1148db2b00..3c10c45586 100644
--- a/include/efi_loader.h
+++ b/include/efi_loader.h
@@ -141,7 +141,7 @@ struct efi_object {
  */
 struct efi_event {
 	uint32_t type;
-	UINTN notify_tpl;
+	size_t notify_tpl;
 	void (EFIAPI *notify_function)(struct efi_event *event, void *context);
 	void *notify_context;
 	u64 trigger_next;
@@ -186,7 +186,7 @@ void efi_runtime_relocate(ulong offset, struct efi_mem_desc *map);
 /* Call this to set the current device name */
 void efi_set_bootdev(const char *dev, const char *devnr, const char *path);
 /* Call this to create an event */
-efi_status_t efi_create_event(uint32_t type, UINTN notify_tpl,
+efi_status_t efi_create_event(uint32_t type, size_t notify_tpl,
 			      void (EFIAPI *notify_function) (
 					struct efi_event *event,
 					void *context),
diff --git a/lib/efi_loader/efi_boottime.c b/lib/efi_loader/efi_boottime.c
index 636c440385..c73bf20d77 100644
--- a/lib/efi_loader/efi_boottime.c
+++ b/lib/efi_loader/efi_boottime.c
@@ -21,7 +21,7 @@
 DECLARE_GLOBAL_DATA_PTR;
 
 /* Task priority level */
-static UINTN efi_tpl = TPL_APPLICATION;
+static size_t efi_tpl = TPL_APPLICATION;
 
 /* This list contains all the EFI objects our payload has access to */
 LIST_HEAD(efi_obj_list);
@@ -177,9 +177,9 @@ static efi_status_t efi_unsupported(const char *funcname)
  * @new_tpl	new value of the task priority level
  * @return	old value of the task priority level
  */
-static unsigned long EFIAPI efi_raise_tpl(UINTN new_tpl)
+static unsigned long EFIAPI efi_raise_tpl(size_t new_tpl)
 {
-	UINTN old_tpl = efi_tpl;
+	size_t old_tpl = efi_tpl;
 
 	EFI_ENTRY("0x%zx", new_tpl);
 
@@ -202,7 +202,7 @@ static unsigned long EFIAPI efi_raise_tpl(UINTN new_tpl)
  *
  * @old_tpl	value of the task priority level to be restored
  */
-static void EFIAPI efi_restore_tpl(UINTN old_tpl)
+static void EFIAPI efi_restore_tpl(size_t old_tpl)
 {
 	EFI_ENTRY("0x%zx", old_tpl);
 
@@ -354,7 +354,7 @@ static struct efi_event efi_events[16];
  * @event		created event
  * @return		status code
  */
-efi_status_t efi_create_event(uint32_t type, UINTN notify_tpl,
+efi_status_t efi_create_event(uint32_t type, size_t notify_tpl,
 			      void (EFIAPI *notify_function) (
 					struct efi_event *event,
 					void *context),
@@ -404,7 +404,7 @@ efi_status_t efi_create_event(uint32_t type, UINTN notify_tpl,
  * @return		status code
  */
 static efi_status_t EFIAPI efi_create_event_ext(
-			uint32_t type, UINTN notify_tpl,
+			uint32_t type, size_t notify_tpl,
 			void (EFIAPI *notify_function) (
 					struct efi_event *event,
 					void *context),
diff --git a/lib/efi_selftest/efi_selftest_tpl.c b/lib/efi_selftest/efi_selftest_tpl.c
index 0b78ee7595..9f325c9c13 100644
--- a/lib/efi_selftest/efi_selftest_tpl.c
+++ b/lib/efi_selftest/efi_selftest_tpl.c
@@ -112,7 +112,7 @@ static int execute(void)
 {
 	size_t index;
 	efi_status_t ret;
-	UINTN old_tpl;
+	size_t old_tpl;
 
 	/* Set 10 ms timer */
 	notification_count = 0;
-- 
2.14.1


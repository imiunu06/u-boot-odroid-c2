From ebeb60d60edbef87aaf4590ea0c4365fd0a5c421 Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Tue, 1 Aug 2017 16:27:17 +0200
Subject: [PATCH 1/1] efi_loader: make efi_locate_protocol callable internally

Provide wrapper efi_locate_protocol_ext for external calls.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 lib/efi_loader/efi_boottime.c | 31 ++++++++++++++++++++++---------
 1 file changed, 22 insertions(+), 9 deletions(-)

diff --git a/lib/efi_loader/efi_boottime.c b/lib/efi_loader/efi_boottime.c
index fbd0dd8440..890787efda 100644
--- a/lib/efi_loader/efi_boottime.c
+++ b/lib/efi_loader/efi_boottime.c
@@ -21,6 +21,11 @@
 
 DECLARE_GLOBAL_DATA_PTR;
 
+/* Function to call LocateProtocol internally */
+static efi_status_t efi_locate_protocol(efi_guid_t *protocol,
+					void *registration,
+					void **protocol_interface);
+
 /* This list contains all the EFI objects our payload has access to */
 LIST_HEAD(efi_obj_list);
 
@@ -1171,17 +1176,15 @@ out:
 	return EFI_EXIT(r);
 }
 
-static efi_status_t EFIAPI efi_locate_protocol(efi_guid_t *protocol,
-					       void *registration,
-					       void **protocol_interface)
+static efi_status_t efi_locate_protocol(efi_guid_t *protocol,
+					void *registration,
+					void **protocol_interface)
 {
 	struct list_head *lhandle;
 	int i;
 
-	EFI_ENTRY("%p, %p, %p", protocol, registration, protocol_interface);
-
 	if (!protocol || !protocol_interface)
-		return EFI_EXIT(EFI_INVALID_PARAMETER);
+		return EFI_INVALID_PARAMETER;
 
 	list_for_each(lhandle, &efi_obj_list) {
 		struct efi_object *efiobj;
@@ -1195,13 +1198,23 @@ static efi_status_t EFIAPI efi_locate_protocol(efi_guid_t *protocol,
 			if (!guidcmp(handler->guid, protocol)) {
 				*protocol_interface =
 					handler->protocol_interface;
-				return EFI_EXIT(EFI_SUCCESS);
+				return EFI_SUCCESS;
 			}
 		}
 	}
 	*protocol_interface = NULL;
 
-	return EFI_EXIT(EFI_NOT_FOUND);
+	return EFI_NOT_FOUND;
+}
+
+static efi_status_t EFIAPI efi_locate_protocol_ext(efi_guid_t *protocol,
+						   void *registration,
+						   void **protocol_interface)
+{
+	EFI_ENTRY("%p, %p, %p", protocol, registration, protocol_interface);
+
+	return EFI_EXIT(efi_locate_protocol(protocol, registration,
+					    protocol_interface));
 }
 
 static efi_status_t EFIAPI efi_install_multiple_protocol_interfaces(
@@ -1493,7 +1506,7 @@ static const struct efi_boot_services efi_boot_services = {
 	.open_protocol_information = efi_open_protocol_information,
 	.protocols_per_handle = efi_protocols_per_handle,
 	.locate_handle_buffer = efi_locate_handle_buffer,
-	.locate_protocol = efi_locate_protocol,
+	.locate_protocol = efi_locate_protocol_ext,
 	.install_multiple_protocol_interfaces = efi_install_multiple_protocol_interfaces,
 	.uninstall_multiple_protocol_interfaces = efi_uninstall_multiple_protocol_interfaces,
 	.calculate_crc32 = efi_calculate_crc32,
-- 
2.13.2


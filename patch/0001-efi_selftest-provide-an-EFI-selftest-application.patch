From 297c47902c68b1eab0314af58996a7c7a53ef149 Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Sat, 2 Sep 2017 08:07:49 +0200
Subject: [PATCH 1/1] efi_selftest: provide an EFI selftest application

Provide a framework to which we can add all EFI API testing.

A standalone EFI application is provided.
This application can also be incorporated into U-Boot and be
executed with the bootefi selftest command.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 arch/arm/lib/Makefile              |  1 +
 arch/x86/config.mk                 |  2 +-
 arch/x86/lib/Makefile              |  2 +-
 cmd/Kconfig                        |  2 ++
 cmd/bootefi.c                      | 23 +++++++++++++++++---
 include/asm-generic/sections.h     |  2 ++
 include/efi_selftest.h             | 43 ++++++++++++++++++++++++++++++++++++++
 lib/Makefile                       |  1 +
 lib/efi_selftest/Kconfig           | 19 +++++++++++++++++
 lib/efi_selftest/Makefile          | 23 ++++++++++++++++++++
 lib/efi_selftest/selftest.c        | 22 +++++++++++++++++++
 lib/efi_selftest/selftest_efi.d    |  1 +
 lib/efi_selftest/selftest_events.c | 19 +++++++++++++++++
 13 files changed, 155 insertions(+), 5 deletions(-)
 create mode 100644 include/efi_selftest.h
 create mode 100644 lib/efi_selftest/Kconfig
 create mode 100644 lib/efi_selftest/Makefile
 create mode 100644 lib/efi_selftest/selftest.c
 create mode 100644 lib/efi_selftest/selftest_efi.d
 create mode 100644 lib/efi_selftest/selftest_events.c

diff --git a/arch/arm/lib/Makefile b/arch/arm/lib/Makefile
index 6e1c436933..050789e12b 100644
--- a/arch/arm/lib/Makefile
+++ b/arch/arm/lib/Makefile
@@ -106,4 +106,5 @@ CFLAGS_$(EFI_RELOC) := $(CFLAGS_EFI)
 CFLAGS_REMOVE_$(EFI_RELOC) := $(CFLAGS_NON_EFI)
 
 extra-$(CONFIG_CMD_BOOTEFI_HELLO_COMPILE) += $(EFI_CRT0) $(EFI_RELOC)
+extra-$(CONFIG_CMD_SELFTEST_COMPILE) += $(EFI_CRT0) $(EFI_RELOC)
 extra-$(CONFIG_EFI) += $(EFI_CRT0) $(EFI_RELOC)
diff --git a/arch/x86/config.mk b/arch/x86/config.mk
index 8835dcf36f..fe8639aef6 100644
--- a/arch/x86/config.mk
+++ b/arch/x86/config.mk
@@ -91,7 +91,7 @@ else
 PLATFORM_CPPFLAGS += -D__I386__
 endif
 
-ifneq ($(CONFIG_EFI_STUB)$(CONFIG_CMD_BOOTEFI_HELLO_COMPILE),)
+ifneq ($(CONFIG_EFI_STUB)$(CONFIG_CMD_BOOTEFI_HELLO_COMPILE)$(CONFIG_CMD_SELFTEST_COMPILE),)
 
 ifneq ($(CONFIG_EFI_STUB_64BIT),)
 EFI_LDS := elf_x86_64_efi.lds
diff --git a/arch/x86/lib/Makefile b/arch/x86/lib/Makefile
index fe00d7573f..6575e1a0cb 100644
--- a/arch/x86/lib/Makefile
+++ b/arch/x86/lib/Makefile
@@ -77,7 +77,7 @@ extra-$(CONFIG_EFI_STUB_64BIT) += crt0_x86_64_efi.o reloc_x86_64_efi.o
 
 endif
 
-ifneq ($(CONFIG_EFI_STUB)$(CONFIG_CMD_BOOTEFI_HELLO_COMPILE),)
+ifneq ($(CONFIG_EFI_STUB)$(CONFIG_CMD_BOOTEFI_HELLO_COMPILE)$(CONFIG_CMD_SELFTEST_COMPILE),)
 ifeq ($(CONFIG_$(SPL_)X86_64),)
 extra-y += $(EFI_CRT0) $(EFI_RELOC)
 endif
diff --git a/cmd/Kconfig b/cmd/Kconfig
index d6d130edfa..3ef9b16b08 100644
--- a/cmd/Kconfig
+++ b/cmd/Kconfig
@@ -222,6 +222,8 @@ config CMD_BOOTEFI_HELLO
 	  for testing that EFI is working at a basic level, and for bringing
 	  up EFI support on a new architecture.
 
+source lib/efi_selftest/Kconfig
+
 config CMD_BOOTMENU
 	bool "bootmenu"
 	select MENU
diff --git a/cmd/bootefi.c b/cmd/bootefi.c
index c5bfab1147..5bed03e003 100644
--- a/cmd/bootefi.c
+++ b/cmd/bootefi.c
@@ -290,7 +290,8 @@ static unsigned long do_bootefi_exec(void *efi, void *fdt)
 /* Interpreter command to boot an arbitrary EFI image from memory */
 static int do_bootefi(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 {
-	char *saddr, *sfdt;
+	char *saddr = NULL;
+	char *sfdt;
 	unsigned long addr, fdt_addr = 0;
 	unsigned long r;
 
@@ -306,9 +307,21 @@ static int do_bootefi(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 		else
 			addr = CONFIG_SYS_LOAD_ADDR;
 		memcpy((char *)addr, __efi_helloworld_begin, size);
-	} else
+	}
 #endif
-	{
+#ifdef CONFIG_CMD_BOOTEFI_SELFTEST
+	if (!strcmp(argv[1], "selftest")) {
+		ulong size = __efi_selftest_end - __efi_selftest_begin;
+
+		saddr = env_get("loadaddr");
+		if (saddr)
+			addr = simple_strtoul(saddr, NULL, 16);
+		else
+			addr = CONFIG_SYS_LOAD_ADDR;
+		memcpy((char *)addr, __efi_selftest_begin, size);
+	}
+#endif
+	if (saddr == NULL) {
 		saddr = argv[1];
 
 		addr = simple_strtoul(saddr, NULL, 16);
@@ -340,6 +353,10 @@ static char bootefi_help_text[] =
 	"hello\n"
 	"  - boot a sample Hello World application stored within U-Boot"
 #endif
+#ifdef CONFIG_CMD_BOOTEFI_SELFTEST
+	"hello\n"
+	"  - boot an EFI selftest application stored within U-Boot"
+#endif
 	;
 #endif
 
diff --git a/include/asm-generic/sections.h b/include/asm-generic/sections.h
index b6535705a5..5d48cbaa37 100644
--- a/include/asm-generic/sections.h
+++ b/include/asm-generic/sections.h
@@ -24,6 +24,8 @@ extern char __initdata_begin[], __initdata_end[];
 extern char __start_rodata[], __end_rodata[];
 extern char __efi_helloworld_begin[];
 extern char __efi_helloworld_end[];
+extern char __efi_selftest_begin[];
+extern char __efi_selftest_end[];
 
 /* Start and end of .ctors section - used for constructor calls. */
 extern char __ctors_start[], __ctors_end[];
diff --git a/include/efi_selftest.h b/include/efi_selftest.h
new file mode 100644
index 0000000000..5d95990799
--- /dev/null
+++ b/include/efi_selftest.h
@@ -0,0 +1,44 @@
+/*
+ *  EFI application loader
+ *
+ *  Copyright (c) 2017 Heinrich Schuchardt <xypron.glpk@gmx.de>
+ *
+ *  SPDX-License-Identifier:     GPL-2.0+
+ */
+
+#ifndef _EFI_SELFTEST_H
+#define _EFI_SELFTEST_H
+
+#include <common.h>
+#include <efi.h>
+#include <efi_api.h>
+#include <linker_lists.h>
+
+enum efi_test_phase {
+	EFI_EXECUTE_BEFORE_BOOTTIME_EXIT,
+	EFI_SETUP_BEFORE_BOOTTIME_EXIT,
+	EFI_SETUP_AFTER_BOOTTIME_EXT,
+};
+
+/**
+ * struct efi_unit_test - EFI unit test
+ *
+ * A efi_unit_test provides a interface to an EFI unit test.
+ *
+ * @name: Name of unit test
+ * @phase: specifies when setup and execute are executed
+ * @setup: set up the unit test
+ * @execute: execute the unit test
+ */
+struct efi_unit_test {
+	const char *name;
+	const enum efi_test_phase phase;
+	int (*setup)(efi_handle_t handle, struct efi_system_table *systable);
+	int (*execute)(void);
+};
+
+/* Declare a new EFI unit test */
+#define EFI_UNIT_TEST(__name)						\
+	ll_entry_declare(struct efi_unit_test, __name, efi_unit_test)
+
+#endif /* _EFI_SELFTEST_H */
diff --git a/lib/Makefile b/lib/Makefile
index 2eef1eb80e..2ffec5a455 100644
--- a/lib/Makefile
+++ b/lib/Makefile
@@ -9,6 +9,7 @@ ifndef CONFIG_SPL_BUILD
 
 obj-$(CONFIG_EFI) += efi/
 obj-$(CONFIG_EFI_LOADER) += efi_loader/
+obj-$(CONFIG_EFI_LOADER) += efi_selftest/
 obj-$(CONFIG_LZMA) += lzma/
 obj-$(CONFIG_LZO) += lzo/
 obj-$(CONFIG_ZLIB) += zlib/
diff --git a/lib/efi_selftest/Kconfig b/lib/efi_selftest/Kconfig
new file mode 100644
index 0000000000..ff937a5dd9
--- /dev/null
+++ b/lib/efi_selftest/Kconfig
@@ -0,0 +1,19 @@
+config CMD_BOOTEFI_SELFTEST_COMPILE
+	bool "Compile an EFI selftest application"
+	depends on CMD_BOOTEFI && (ARM || X86)
+	default y
+	help
+	  This compiles an EFI application that can be used with the test/py
+	  testing framework. It provides extended tests for of EFI
+	  API implementation.
+
+	  No additional space will be required in the resulting U-Boot binary
+	  when this option is enabled.
+
+config CMD_BOOTEFI_SELFTEST
+	bool "Allow booting an EFI selftest"
+	depends on CMD_BOOTEFI_SELFTEST_COMPILE
+	help
+	  This adds an EFI test application to U-Boot that can be executed
+	  with the 'bootefi selftest' command. It provides extended tests of
+	  the EFI API implementation.
diff --git a/lib/efi_selftest/Makefile b/lib/efi_selftest/Makefile
new file mode 100644
index 0000000000..4f951db021
--- /dev/null
+++ b/lib/efi_selftest/Makefile
@@ -0,0 +1,23 @@
+:
+# (C) Copyright 2016, Heinrich Schuchardt <xypron.glpk@gmx.de>
+#
+#  SPDX-License-Identifier:     GPL-2.0+
+#
+
+# This file only gets included with CONFIG_EFI_LOADER set, so all
+# object inclusion implicitly depends on it
+
+CFLAGS_selftest.o := $(CFLAGS_EFI)
+CFLAGS_REMOVE_selftest.o := $(CFLAGS_NON_EFI)
+CFLAGS_selftest_events.o := $(CFLAGS_EFI)
+CFLAGS_REMOVE_selftest_events.o := $(CFLAGS_NON_EFI)
+
+selftest-objs = \
+selftest.o \
+selftest_events.o
+
+ifneq ($(CONFIG_CMD_BOOTEFI_SELFTEST_COMPILE),)
+always += selftest.efi
+endif
+
+obj-$(CONFIG_CMD_BOOTEFI_SELFTEST) += selftest_efi.o
diff --git a/lib/efi_selftest/selftest.c b/lib/efi_selftest/selftest.c
new file mode 100644
index 0000000000..c39544cfec
--- /dev/null
+++ b/lib/efi_selftest/selftest.c
@@ -0,0 +1,22 @@
+/*
+ * EFI selftest
+ *
+ * Copyright (c) 2017 Heinrich Schuchardt <xypron.glpk@gmx.de>
+ *
+ * SPDX-License-Identifier:     GPL-2.0+
+ */
+
+#include <efi_selftest.h>
+
+efi_status_t EFIAPI efi_main(efi_handle_t handle,
+			     struct efi_system_table *systable)
+{
+	struct efi_simple_text_output_protocol *con_out = systable->con_out;
+	struct efi_boot_services *boottime = systable->boottime;
+
+	con_out->output_string(con_out, L"Starting selftest\n");
+	con_out->output_string(con_out, L"Completed selftest\n");
+	boottime->exit(handle, 0, 0, NULL);
+
+	return EFI_SUCCESS;
+}
diff --git a/lib/efi_selftest/selftest_efi.d b/lib/efi_selftest/selftest_efi.d
new file mode 100644
index 0000000000..49ac16635a
--- /dev/null
+++ b/lib/efi_selftest/selftest_efi.d
@@ -0,0 +1 @@
+lib/efi_selftest/selftest_efi.dep: lib/efi_selftest/selftest.o lib/efi_selftest/selftest_events.o
diff --git a/lib/efi_selftest/selftest_events.c b/lib/efi_selftest/selftest_events.c
new file mode 100644
index 0000000000..6d67ebc3bc
--- /dev/null
+++ b/lib/efi_selftest/selftest_events.c
@@ -0,0 +1,19 @@
+
+#include <efi_selftest.h>
+
+static int setup(efi_handle_t handle, struct efi_system_table *systable)
+{
+	return 0;
+}
+
+int execute(void)
+{
+	return 0;
+}
+
+EFI_UNIT_TEST(events) = {
+	.name = "event services",
+	.phase = EFI_EXECUTE_BEFORE_BOOTTIME_EXIT,
+	.setup = setup,
+	.execute = execute,
+};
-- 
2.11.0


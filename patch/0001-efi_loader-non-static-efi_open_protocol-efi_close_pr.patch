From b155f9b5583c660b19e17f06256a3a223d61c2ce Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Sun, 20 Aug 2017 18:26:20 +0200
Subject: [PATCH 1/1] efi_loader: non-static efi_open_protocol,
 efi_close_protocol

We need efi_open_protocol and efi_close_protocol for
implementing other functions. So they shouldn't be static.

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 include/efi_loader.h          | 9 +++++++++
 lib/efi_loader/efi_boottime.c | 9 ++++-----
 2 files changed, 13 insertions(+), 5 deletions(-)

diff --git a/include/efi_loader.h b/include/efi_loader.h
index e444bd273f..58604a46f8 100644
--- a/include/efi_loader.h
+++ b/include/efi_loader.h
@@ -199,6 +199,15 @@ efi_status_t efi_set_timer(struct efi_event *event, enum efi_timer_delay type,
 			   uint64_t trigger_time);
 /* Call this to signal an event */
 void efi_signal_event(struct efi_event *event);
+/* Call this with EFI_CALL to close a protocol */
+efi_status_t EFIAPI efi_close_protocol(void *handle, efi_guid_t *protocol,
+				       void *agent_handle,
+				       void *controller_handle);
+/* Call this with EFI_CALL to open a protocol */
+efi_status_t EFIAPI efi_open_protocol(
+			void *handle, efi_guid_t *protocol,
+			void **protocol_interface, void *agent_handle,
+			void *controller_handle, uint32_t attributes);
 
 /* open file system: */
 struct efi_simple_file_system_protocol *efi_simple_file_system(
diff --git a/lib/efi_loader/efi_boottime.c b/lib/efi_loader/efi_boottime.c
index 55b00c3bbd..ee9e9b580c 100644
--- a/lib/efi_loader/efi_boottime.c
+++ b/lib/efi_loader/efi_boottime.c
@@ -1104,10 +1104,9 @@ static efi_status_t EFIAPI efi_disconnect_controller(void *controller_handle,
 	return EFI_EXIT(EFI_INVALID_PARAMETER);
 }
 
-static efi_status_t EFIAPI efi_close_protocol(void *handle,
-					      efi_guid_t *protocol,
-					      void *agent_handle,
-					      void *controller_handle)
+efi_status_t EFIAPI efi_close_protocol(void *handle, efi_guid_t *protocol,
+				       void *agent_handle,
+				       void *controller_handle)
 {
 	struct efi_handler *handler;
 	size_t i;
@@ -1493,7 +1492,7 @@ static efi_status_t efi_protocol_open(
 	return EFI_SUCCESS;
 }
 
-static efi_status_t EFIAPI efi_open_protocol(
+efi_status_t EFIAPI efi_open_protocol(
 			void *handle, efi_guid_t *protocol,
 			void **protocol_interface, void *agent_handle,
 			void *controller_handle, uint32_t attributes)
-- 
2.14.1


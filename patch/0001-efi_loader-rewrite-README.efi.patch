From 90c65836aa659c506ac6d1b096fcc8ee70e1c1a3 Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Wed, 24 Jan 2018 19:04:52 +0100
Subject: [PATCH 1/1] efi_loader: rewrite README.efi

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 doc/README.efi                | 101 +++++++++++++++++-------------------------
 2 files changed, 44 insertions(+), 63 deletions(-)

diff --git a/doc/README.efi b/doc/README.efi
index 956f5bfa0c..55063917c7 100644
--- a/doc/README.efi
+++ b/doc/README.efi
@@ -1,86 +1,65 @@
-#
-# Copyright (C) 2015 Google, Inc
-#
-# SPDX-License-Identifier:	GPL-2.0+
-#
+<!--
+    Copyright (c) 2018 Heinrich Schuchardt
 
-EFI on U-Boot
-=============
-This document provides information about the implementation of the UEFI API [1]
-in U-Boot.
+    SPDX-License-Identifier:     GPL-2.0+
+-->
 
+# EFI on U-Boot
 
-=========== Table of Contents ===========
+## Motivation
 
-Motivation
-How do I get it?
-Status
-Future work
+The Unified Extensible Firmware Interface Specification (UEFI) has become the
+default for booting on AArch64 and x86 systems. It provides a stable API for the
+interaction between and firmware and the drivers and applications that the
+firmware loads. The API provides access to block storage, network, and console
+to name a few. The Linux kernel and bootloaders like Grub or the FreeBSD loader
+can be executed.
 
+## Building for EFI
 
-Motivation
-----------
+The UEFI standard supports only little endian systems. The EFI support can be
+activated for ARM and x86 by specifying
 
-With this API support in place, you can run any UEFI payload (such as the Linux
-kernel, grub2 or gummiboot) on U-Boot. This dramatically simplifies boot loader
-configuration, as U-Boot based systems now look and feel (almost) the same way
-as TianoCore based systems.
+    CONFIG_CMD_BOOTEFI=y
+    CONFIG_EFI_LOADER=y
 
-How do I get it?
-----------------
+in the .config file.
 
-EFI support for 32bit ARM and AArch64 is already included in U-Boot. All you
-need to do is enable
+Support for attaching virtual block devices, e.g. iSCSI drives connected by the
+loaded EFI application requires
 
-  CONFIG_CMD_BOOTEFI=y
-  CONFIG_EFI_LOADER=y
+    CONFIG_BLK=y
+    CONFIG_PARTITIONS=y
 
-in your .config file and you will automatically get a bootefi command to run
-an efi application as well as snippet in the default distro boot script that
-scans for removable media efi binaries as fallback.
+A hello world EFI app can be built with
 
-Status
-------
+    CONFIG_CMD_BOOTEFI_HELLO_COMPILE=y
 
-I am successfully able to run grub2 and Linux EFI binaries with this code on
-ARMv7 as well as AArch64 systems.
+It can be embedded into the U-Boot binary for starting with command
+'bootefi hello' with
 
-When enabled, the resulting U-Boot binary only grows by ~10KB, so it's very
-light weight.
+    CONFIG_CMD_BOOTEFI_HELLO=y
 
-All storage devices are directly accessible from the uEFI payload
+A test suite that can be executed with command 'bootefi selftest' is provided
+by
 
-Removable media booting (search for /efi/boot/boota{a64,arm}.efi) is supported.
+    CONFIG_SELFTEST=y
 
-Simple use cases like "Plug this SD card into my ARM device and it just
-boots into grub which boots into Linux", work very well.
+## The EFI life cycle
 
 
-Running HelloWord.efi
----------------------
 
-You can run a simple 'hello world' EFI program in U-Boot.
-Enable the option CONFIG_CMD_BOOTEFI_HELLO.
 
-Then you can boot into U-Boot and type:
+## Executing EFI binaries
 
-   > bootefi hello
+Three variants of EFI binaries exist:
 
-The 'hello world EFI' program will then run, print a message and exit.
+* applications
+* boot time drivers
+* runtime drivers
 
+## Open issues
 
-Future work
------------
-
-Of course, there are still a few things one could do on top:
-
-   - Improve disk media detection (don't scan, use what information we
-have)
-   - Add EFI variable support using NVRAM
-   - Add GFX support
-   - Make EFI Shell work
-   - Network device support
-   - Support for payload exit
-   - Payload Watchdog support
-
-[1] http://uefi.org/
+* Manage events in a linux linked list. Currently it is an array.
+* Manage configuration tables in a linux linked list.  Currently it is an array.
+* Support DisconnectController for EFI block devices.
-- 
2.11.0


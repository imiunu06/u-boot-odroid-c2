From fdc48890c85197cd6db496d52df817cef7fa19ed Mon Sep 17 00:00:00 2001
From: Heinrich Schuchardt <xypron.glpk@gmx.de>
Date: Sun, 17 Dec 2017 19:30:21 +0100
Subject: [PATCH 1/1] efi_driver: EFI block driver

Signed-off-by: Heinrich Schuchardt <xypron.glpk@gmx.de>
---
 common/board_r.c                  |  1 +
 include/dm/uclass-id.h            |  1 +
 include/efi_loader.h              |  2 ++
 lib/Makefile                      |  1 +
 lib/efi_driver/Makefile           | 10 ++++++++
 lib/efi_driver/efi_block_device.c | 54 +++++++++++++++++++++++++++++++++++++++
 lib/efi_driver/efi_uclass.c       | 54 +++++++++++++++++++++++++++++++++++++++
 7 files changed, 123 insertions(+)
 create mode 100644 lib/efi_driver/Makefile
 create mode 100644 lib/efi_driver/efi_block_device.c
 create mode 100644 lib/efi_driver/efi_uclass.c

diff --git a/common/board_r.c b/common/board_r.c
index 09167c13cc..8f3dd39fd7 100644
--- a/common/board_r.c
+++ b/common/board_r.c
@@ -718,6 +718,7 @@ static init_fnc_t init_sequence_r[] = {
 #endif
 #ifdef CONFIG_EFI_LOADER
 	efi_memory_init,
+	efi_driver_init,
 #endif
 	stdio_init_tables,
 	initr_serial,
diff --git a/include/dm/uclass-id.h b/include/dm/uclass-id.h
index 3fc20834ae..07fabc3ce6 100644
--- a/include/dm/uclass-id.h
+++ b/include/dm/uclass-id.h
@@ -34,6 +34,7 @@ enum uclass_id {
 	UCLASS_CROS_EC,		/* Chrome OS EC */
 	UCLASS_DISPLAY,		/* Display (e.g. DisplayPort, HDMI) */
 	UCLASS_DMA,		/* Direct Memory Access */
+	UCLASS_EFI,		/* EFI managed devices */
 	UCLASS_ETH,		/* Ethernet device */
 	UCLASS_GPIO,		/* Bank of general-purpose I/O pins */
 	UCLASS_FIRMWARE,	/* Firmware */
diff --git a/include/efi_loader.h b/include/efi_loader.h
index 1411782879..36563f722f 100644
--- a/include/efi_loader.h
+++ b/include/efi_loader.h
@@ -264,6 +264,8 @@ efi_status_t efi_get_memory_map(efi_uintn_t *memory_map_size,
 /* Adds a range into the EFI memory map */
 uint64_t efi_add_memory_map(uint64_t start, uint64_t pages, int memory_type,
 			    bool overlap_only_ram);
+/* Called by board init to initialize the EFI drivers */
+int efi_driver_init(void);
 /* Called by board init to initialize the EFI memory map */
 int efi_memory_init(void);
 /* Adds new or overrides configuration table entry to the system table */
diff --git a/lib/Makefile b/lib/Makefile
index 8cd779f8ca..0db41c19f3 100644
--- a/lib/Makefile
+++ b/lib/Makefile
@@ -8,6 +8,7 @@
 ifndef CONFIG_SPL_BUILD
 
 obj-$(CONFIG_EFI) += efi/
+obj-$(CONFIG_EFI_LOADER) += efi_driver/
 obj-$(CONFIG_EFI_LOADER) += efi_loader/
 obj-$(CONFIG_EFI_LOADER) += efi_selftest/
 obj-$(CONFIG_LZMA) += lzma/
diff --git a/lib/efi_driver/Makefile b/lib/efi_driver/Makefile
new file mode 100644
index 0000000000..8583f6fbcd
--- /dev/null
+++ b/lib/efi_driver/Makefile
@@ -0,0 +1,10 @@
+#
+# (C) Copyright 2017 Heinrich Schuchardt
+#
+#  SPDX-License-Identifier:     GPL-2.0+
+#
+
+# This file only gets included with CONFIG_EFI_LOADER set, so all
+# object inclusion implicitly depends on it
+
+obj-y += efi_uclass.o efi_block_device.o
diff --git a/lib/efi_driver/efi_block_device.c b/lib/efi_driver/efi_block_device.c
new file mode 100644
index 0000000000..91f7e317c2
--- /dev/null
+++ b/lib/efi_driver/efi_block_device.c
@@ -0,0 +1,54 @@
+/*
+ *  EFI drivers
+ *
+ *  Copyright (c) 2017 Heinrich Schuchardt
+ *
+ *  SPDX-License-Identifier:     GPL-2.0+
+ */
+
+#include <common.h>
+#include <dm.h>
+
+static int efi_blk_probe(struct udevice *udev)
+{
+	struct blk_desc *desc = dev_get_uclass_platdata(udev);
+
+	part_init(desc);
+
+	return 0;
+}
+
+ulong efi_read(struct udevice *dev, lbaint_t blknr, lbaint_t blkcnt,
+	       void *buffer)
+{
+	ulong n = 0;
+
+	return n;
+}
+
+ulong efi_write(struct udevice *dev, lbaint_t blknr, lbaint_t blkcnt,
+		const void *buffer)
+{
+	ulong n = 0;
+
+	return n;
+}
+
+static const struct blk_ops efi_blk_ops = {
+	.read	= efi_read,
+	.write	= efi_write,
+};
+
+U_BOOT_DRIVER(efi_blk) = {
+	.name		= "efi_blk",
+	.id		= UCLASS_BLK,
+	.ops		= &efi_blk_ops,
+	.probe		= efi_blk_probe,
+};
+
+U_BOOT_DRIVER(efi_block) = {
+	.name		= "EFI block driver",
+	.id		= UCLASS_EFI,
+};
+
+
diff --git a/lib/efi_driver/efi_uclass.c b/lib/efi_driver/efi_uclass.c
new file mode 100644
index 0000000000..c1e041eb97
--- /dev/null
+++ b/lib/efi_driver/efi_uclass.c
@@ -0,0 +1,54 @@
+/*
+ *  EFI drivers
+ *
+ *  Copyright (c) 2017 Heinrich Schuchardt
+ *
+ *  SPDX-License-Identifier:     GPL-2.0+
+ */
+
+#include <common.h>
+#include <dm.h>
+#include <efi_loader.h>
+
+static int efi_add_driver(struct driver *drv) {
+	printf("EFI: Adding driver %s\n", drv->name);
+
+	return 0;
+}
+
+/*
+ * Initialize the EFI drivers.
+ * Called by board_init_r().
+ *
+ * @return	0 = success, any other value will stop further execution
+ */
+int efi_driver_init(void) {
+	struct driver *drv;
+
+	printf("EFI: Initializing EFI driver framework\n");
+	for (drv = ll_entry_start(struct driver, driver);
+	     drv < ll_entry_end(struct driver, driver); ++drv) {
+		if (drv->id == UCLASS_EFI)
+			efi_add_driver(drv);
+	}
+	return 0;
+}
+
+static int efi_uc_init(struct uclass *class)
+{
+	printf("EFI: Initializing UCLASS_EFI\n");
+	return 0;
+}
+
+static int efi_uc_destroy(struct uclass *class)
+{
+	printf("Destroying  UCLASS_EFI\n");
+	return 0;
+}
+
+UCLASS_DRIVER(efi) = {
+	.name		= "efi",
+	.id		= UCLASS_EFI,
+	.init		= efi_uc_init,
+	.destroy	= efi_uc_destroy,
+};
-- 
2.15.1

